"""Comprehensive Analysis Framework - Integrates all methodologies"""

import numpy as np\nimport pandas as pd\nfrom typing import Dict, List, Optional, Tuple\nfrom dataclasses import dataclass\nfrom datetime import datetime\n\nfrom ..astrological.chart_calculator import ChartCalculator, BirthChart\nfrom ..genetic.variant_analyzer import VariantAnalyzer, GeneticProfile\nfrom ..correlation.dignity_correlation import DignityCorrelation\nfrom ..correlation.pathway_correlation import PathwayCorrelation\nfrom ..statistical.validation import StatisticalValidator\n\n@dataclass\nclass ComprehensiveResults:\n    \"\"\"Complete analysis results from all methodologies\"\"\"\n    overall_correlation: float\n    confidence_level: float\n    methodology_results: Dict[str, Dict]\n    top_correlations: List[Dict]\n    statistical_validation: Dict\n    interpretation: str\n    recommendations: List[str]\n\nclass ComprehensiveAnalyzer:\n    \"\"\"Main analyzer implementing the integrated methodology framework\"\"\"\n    \n    def __init__(self):\n        \"\"\"Initialize comprehensive analyzer with all components\"\"\"\n        self.chart_calc = ChartCalculator()\n        self.variant_analyzer = VariantAnalyzer()\n        self.dignity_correlation = DignityCorrelation()\n        self.pathway_correlation = PathwayCorrelation()\n        self.statistical_validator = StatisticalValidator()\n    \n    def comprehensive_astro_genetic_analysis(self, birth_datetime: datetime, \n                                           latitude: float, longitude: float,\n                                           genetic_file_path: str) -> ComprehensiveResults:\n        \"\"\"Perform comprehensive astro-genetic correlation analysis\n        \n        Args:\n            birth_datetime: Birth date and time (UTC)\n            latitude: Geographic latitude \n            longitude: Geographic longitude\n            genetic_file_path: Path to genetic data file\n            \n        Returns:\n            Complete analysis results\n        \"\"\"\n        # Step 1: Calculate birth chart\n        chart = self.chart_calc.calculate_chart(birth_datetime, latitude, longitude)\n        \n        # Step 2: Load and process genetic data\n        profile = self.variant_analyzer.load_genetic_data(genetic_file_path)\n        \n        # Step 3: Run all correlation methodologies\n        methodology_results = {}\n        \n        # Traditional Dignity Analysis (Core Method)\n        dignity_results = self.dignity_correlation.analyze_dignity_genetic_correlation(chart, profile)\n        methodology_results['dignity'] = {\n            'correlation': dignity_results.correlation_coefficient,\n            'p_value': dignity_results.p_value,\n            'confidence_interval': dignity_results.confidence_interval,\n            'significant_correlations': dignity_results.significant_correlations,\n            'method_weight': 0.4  # Highest weight as recommended\n        }\n        \n        # Pathway Analysis (High Priority Method)\n        pathway_results = self.pathway_correlation.analyze_planetary_pathway_correlations(chart, profile)\n        methodology_results['pathway'] = {\n            'correlation': pathway_results.overall_correlation,\n            'p_value': pathway_results.p_value,\n            'strongest_correlations': pathway_results.strongest_correlations,\n            'confidence_level': pathway_results.confidence_level,\n            'method_weight': 0.35  # Second highest weight\n        }\n        \n        # Polygenic Risk Score Analysis\n        polygenic_results = self._analyze_polygenic_correlations(chart, profile)\n        methodology_results['polygenic'] = {\n            'correlation': polygenic_results['overall_correlation'],\n            'trait_correlations': polygenic_results['trait_correlations'],\n            'confidence': polygenic_results['confidence'],\n            'method_weight': 0.25  # Third priority\n        }\n        \n        # Step 4: Meta-analysis across methods\n        meta_results = self._meta_analyze_results(methodology_results)\n        \n        # Step 5: Statistical validation\n        validation_results = self._validate_results(methodology_results, chart, profile)\n        \n        # Step 6: Generate interpretation and recommendations\n        interpretation = self._generate_interpretation(methodology_results, meta_results)\n        recommendations = self._generate_recommendations(methodology_results, validation_results)\n        \n        return ComprehensiveResults(\n            overall_correlation=meta_results['combined_correlation'],\n            confidence_level=meta_results['combined_confidence'],\n            methodology_results=methodology_results,\n            top_correlations=meta_results['top_correlations'],\n            statistical_validation=validation_results,\n            interpretation=interpretation,\n            recommendations=recommendations\n        )\n    \n    def _analyze_polygenic_correlations(self, chart: BirthChart, profile: GeneticProfile) -> Dict:\n        \"\"\"Analyze correlations using polygenic risk scores\"\"\"\n        from ..genetic.polygenic_calculator import PolygenicCalculator\n        \n        polygenic_calc = PolygenicCalculator()\n        prs_scores = polygenic_calc.calculate_all_prs(profile)\n        \n        # Map PRS traits to planetary strengths\n        dignity_scores = self.dignity_correlation.dignity_calc.calculate_all_dignities(chart)\n        \n        trait_correlations = {}\n        correlations = []\n        \n        # Trait-planet mappings based on traditional rulerships\n        trait_planet_map = {\n            'cardiovascular_disease': 'sun',\n            'cognitive_ability': 'mercury', \n            'inflammatory_response': 'mars',\n            'metabolic_efficiency': 'venus',\n            'athletic_performance': 'mars'\n        }\n        \n        for trait, planet in trait_planet_map.items():\n            if trait in prs_scores and planet in dignity_scores:\n                prs_score = prs_scores[trait].score\n                dignity_score = dignity_scores[planet]['total']\n                \n                # Calculate correlation between PRS and dignity\n                correlation = np.tanh(prs_score) * np.tanh(dignity_score / 5.0)\n                \n                trait_correlations[trait] = {\n                    'correlation': correlation,\n                    'prs_score': prs_score,\n                    'prs_percentile': prs_scores[trait].percentile,\n                    'dignity_score': dignity_score,\n                    'confidence': prs_scores[trait].confidence\n                }\n                \n                correlations.append(correlation)\n        \n        overall_correlation = np.mean(correlations) if correlations else 0.0\n        confidence = np.mean([tc['confidence'] for tc in trait_correlations.values()]) if trait_correlations else 0.0\n        \n        return {\n            'overall_correlation': overall_correlation,\n            'trait_correlations': trait_correlations,\n            'confidence': confidence\n        }\n    \n    def _meta_analyze_results(self, methodology_results: Dict[str, Dict]) -> Dict:\n        \"\"\"Perform meta-analysis across all methodologies\"\"\"\n        # Weight correlations by method importance and confidence\n        weighted_correlations = []\n        total_weight = 0.0\n        \n        for method_name, results in methodology_results.items():\n            correlation = results['correlation']\n            weight = results['method_weight']\n            \n            # Adjust weight by method-specific confidence if available\n            if 'confidence_level' in results:\n                weight *= results['confidence_level']\n            elif 'confidence' in results:\n                weight *= results['confidence']\n            \n            weighted_correlations.append(correlation * weight)\n            total_weight += weight\n        \n        # Calculate combined correlation\n        if total_weight > 0:\n            combined_correlation = sum(weighted_correlations) / total_weight\n        else:\n            combined_correlation = 0.0\n        \n        # Calculate combined confidence\n        confidences = []\n        for results in methodology_results.values():\n            if 'confidence_level' in results:\n                confidences.append(results['confidence_level'])\n            elif 'confidence' in results:\n                confidences.append(results['confidence'])\n        \n        combined_confidence = np.mean(confidences) if confidences else 0.0\n        \n        # Identify top correlations across all methods\n        top_correlations = self._extract_top_correlations(methodology_results)\n        \n        return {\n            'combined_correlation': combined_correlation,\n            'combined_confidence': combined_confidence,\n            'total_weight': total_weight,\n            'top_correlations': top_correlations\n        }\n    \n    def _extract_top_correlations(self, methodology_results: Dict) -> List[Dict]:\n        \"\"\"Extract top correlations from all methodologies\"\"\"\n        all_correlations = []\n        \n        # From dignity analysis\n        if 'dignity' in methodology_results:\n            for corr in methodology_results['dignity'].get('significant_correlations', []):\n                all_correlations.append({\n                    'method': 'dignity',\n                    'type': 'planet-genetic',\n                    'strength': corr['strength'],\n                    'details': corr\n                })\n        \n        # From pathway analysis  \n        if 'pathway' in methodology_results:\n            for corr in methodology_results['pathway'].get('strongest_correlations', []):\n                all_correlations.append({\n                    'method': 'pathway',\n                    'type': 'planet-pathway',\n                    'strength': corr['strength'],\n                    'details': corr\n                })\n        \n        # From polygenic analysis\n        if 'polygenic' in methodology_results:\n            for trait, corr_info in methodology_results['polygenic'].get('trait_correlations', {}).items():\n                all_correlations.append({\n                    'method': 'polygenic',\n                    'type': 'trait-planet',\n                    'strength': abs(corr_info['correlation']) * corr_info['confidence'],\n                    'details': {'trait': trait, **corr_info}\n                })\n        \n        # Sort by strength and return top 5\n        return sorted(all_correlations, key=lambda x: x['strength'], reverse=True)[:5]\n    \n    def _validate_results(self, methodology_results: Dict, chart: BirthChart, profile: GeneticProfile) -> Dict:\n        \"\"\"Statistical validation of results\"\"\"\n        validation = {}\n        \n        # Basic validation metrics\n        correlations = [results['correlation'] for results in methodology_results.values()]\n        \n        validation['consistency'] = {\n            'mean_correlation': np.mean(correlations),\n            'std_correlation': np.std(correlations),\n            'min_correlation': np.min(correlations),\n            'max_correlation': np.max(correlations)\n        }\n        \n        # Data quality assessment\n        validation['data_quality'] = {\n            'genetic_variant_count': len(profile.variants),\n            'chart_completeness': len(chart.planets) / 10.0,  # 10 traditional planets\n            'adequate_sample': len(profile.variants) >= 10\n        }\n        \n        # Statistical significance\n        significant_methods = 0\n        for results in methodology_results.values():\n            if results.get('p_value', 1.0) < 0.05:\n                significant_methods += 1\n        \n        validation['significance'] = {\n            'significant_methods': significant_methods,\n            'total_methods': len(methodology_results),\n            'significance_ratio': significant_methods / len(methodology_results)\n        }\n        \n        return validation\n    \n    def _generate_interpretation(self, methodology_results: Dict, meta_results: Dict) -> str:\n        \"\"\"Generate human-readable interpretation\"\"\"\n        combined_corr = meta_results['combined_correlation']\n        combined_conf = meta_results['combined_confidence']\n        \n        # Determine overall strength\n        if abs(combined_corr) > 0.6 and combined_conf > 0.7:\n            strength = \"strong\"\n        elif abs(combined_corr) > 0.3 and combined_conf > 0.5:\n            strength = \"moderate\"\n        else:\n            strength = \"weak\"\n        \n        direction = \"positive\" if combined_corr > 0 else \"negative\"\n        \n        interpretation = f\"\"\"COMPREHENSIVE ASTRO-GENOMIC ANALYSIS RESULTS:\n\nOverall Finding: {strength.title()} {direction} correlation detected between astrological factors and genetic expression.\n\nCombined Correlation: {combined_corr:.3f}\nConfidence Level: {combined_conf:.1%}\n\nMETHOD BREAKDOWN:\n\"\"\"\n        \n        # Add method-specific interpretations\n        for method, results in methodology_results.items():\n            corr = results['correlation']\n            interpretation += f\"\\n• {method.title()}: {corr:.3f} correlation\"\n        \n        # Add top findings\n        top_corrs = meta_results['top_correlations'][:3]\n        if top_corrs:\n            interpretation += \"\\n\\nTOP CORRELATIONS:\\n\"\n            for i, corr in enumerate(top_corrs, 1):\n                interpretation += f\"{i}. {corr['method'].title()} method: {corr['details']}\\n\"\n        \n        return interpretation\n    \n    def _generate_recommendations(self, methodology_results: Dict, validation_results: Dict) -> List[str]:\n        \"\"\"Generate actionable recommendations\"\"\"\n        recommendations = []\n        \n        # Data quality recommendations\n        variant_count = validation_results['data_quality']['genetic_variant_count']\n        if variant_count < 20:\n            recommendations.append(f\"Consider expanding genetic testing - only {variant_count} variants analyzed. 50+ recommended for higher accuracy.\")\n        \n        # Method-specific recommendations\n        best_method = max(methodology_results.items(), key=lambda x: abs(x[1]['correlation']))\n        recommendations.append(f\"The {best_method[0]} methodology showed strongest results - consider focusing further analysis here.\")\n        \n        # Statistical recommendations\n        significance_ratio = validation_results['significance']['significance_ratio']\n        if significance_ratio < 0.5:\n            recommendations.append(\"Statistical significance is limited - consider larger sample size or additional data points.\")\n        \n        # Practical recommendations\n        combined_corr = max(abs(results['correlation']) for results in methodology_results.values())\n        if combined_corr > 0.5:\n            recommendations.append(\"Strong correlations detected - results warrant further investigation and replication studies.\")\n        elif combined_corr > 0.3:\n            recommendations.append(\"Moderate correlations suggest potential relationships - additional data would strengthen analysis.\")\n        else:\n            recommendations.append(\"Weak correlations observed - consider alternative methodologies or different genetic markers.\")\n        \n        return recommendations